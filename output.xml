<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.10.12 on linux)" generated="20231202 14:00:11.901" rpa="false" schemaversion="4">
<suite id="s1" name="Tests" source="/home/juhaleik/opisk/ohjelmistotuotanto/miniprojekti/src/tests">
<suite id="s1-s1" name="Tests" source="/home/juhaleik/opisk/ohjelmistotuotanto/miniprojekti/src/tests/tests.robot">
<test id="s1-s1-t1" name="Adding Inproceedings Works" line="11">
<kw name="Command" library="AppLibrary">
<arg>2</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.958" endtime="20231202 14:00:11.961"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>inproceedings</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.961" endtime="20231202 14:00:11.961"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>title_value</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.961" endtime="20231202 14:00:11.961"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>author_value</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.962" endtime="20231202 14:00:11.962"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>booktitle_value</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.962" endtime="20231202 14:00:11.962"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>2000</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.962" endtime="20231202 14:00:11.962"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.962" endtime="20231202 14:00:11.962"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.962" endtime="20231202 14:00:11.962"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.962" endtime="20231202 14:00:11.962"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.963"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.963"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.963"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.963"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>1</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.963"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>x</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.963"/>
</kw>
<kw name="Run Program" library="AppLibrary">
<doc>Start running the program with the predetermined command list.</doc>
<msg timestamp="20231202 14:00:11.969" level="INFO">ReferenceType.INPROCEEDINGS
author_00
{'title': 'title_value', 'author': 'author_value', 'booktitle': 'booktitle_value', 'year': '2000'}</msg>
<status status="PASS" starttime="20231202 14:00:11.963" endtime="20231202 14:00:11.969"/>
</kw>
<kw name="Output Should Contain" library="AppLibrary">
<arg>{author_value}</arg>
<doc>Assert that the output contains a string.</doc>
<status status="PASS" starttime="20231202 14:00:11.969" endtime="20231202 14:00:11.969"/>
</kw>
<status status="PASS" starttime="20231202 14:00:11.958" endtime="20231202 14:00:11.969"/>
</test>
<test id="s1-s1-t2" name="Shutting Down Works" line="30">
<kw name="Command" library="AppLibrary">
<arg>x</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.969" endtime="20231202 14:00:11.971"/>
</kw>
<kw name="Run Program" library="AppLibrary">
<doc>Start running the program with the predetermined command list.</doc>
<status status="PASS" starttime="20231202 14:00:11.971" endtime="20231202 14:00:11.971"/>
</kw>
<kw name="Output Should Contain" library="AppLibrary">
<arg>Shutting down</arg>
<doc>Assert that the output contains a string.</doc>
<status status="PASS" starttime="20231202 14:00:11.971" endtime="20231202 14:00:11.971"/>
</kw>
<status status="PASS" starttime="20231202 14:00:11.969" endtime="20231202 14:00:11.971"/>
</test>
<test id="s1-s1-t3" name="Mandatory Field Is Required" line="35">
<kw name="Command" library="AppLibrary">
<arg>2</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.972" endtime="20231202 14:00:11.973"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>inproceedings</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.973" endtime="20231202 14:00:11.973"/>
</kw>
<kw name="Command" library="AppLibrary">
<arg>\</arg>
<doc>Add command to be executed.</doc>
<status status="PASS" starttime="20231202 14:00:11.973" endtime="20231202 14:00:11.973"/>
</kw>
<kw name="Run Program" library="AppLibrary">
<doc>Start running the program with the predetermined command list.</doc>
<status status="PASS" starttime="20231202 14:00:11.974" endtime="20231202 14:00:11.974"/>
</kw>
<kw name="Output Should Contain" library="AppLibrary">
<arg>Field is mandatory</arg>
<doc>Assert that the output contains a string.</doc>
<status status="PASS" starttime="20231202 14:00:11.974" endtime="20231202 14:00:11.974"/>
</kw>
<status status="PASS" starttime="20231202 14:00:11.971" endtime="20231202 14:00:11.974"/>
</test>
<test id="s1-s1-t4" name="As A User I Want The App To Use Database File" line="42">
<kw name="Spawn" library="PexpectLibrary">
<arg>python3 src/index_gui.py</arg>
<doc>Spawn a new process, and set the active process to the new process.
If current active process exists, it would be killed before spawning.</doc>
<status status="PASS" starttime="20231202 14:00:11.974" endtime="20231202 14:00:11.978"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>GUI</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:11.978" endtime="20231202 14:00:12.166"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>a</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.166" endtime="20231202 14:00:12.216"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>TechReport</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:12.217" endtime="20231202 14:00:12.301"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>Inproceedings</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:12.301" endtime="20231202 14:00:12.301"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>o</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.302" endtime="20231202 14:00:12.352"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>title</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:12.352" endtime="20231202 14:00:12.428"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>test_title</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:12.428" endtime="20231202 14:00:12.479"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.479" endtime="20231202 14:00:12.529"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>test_author</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:12.530" endtime="20231202 14:00:12.580"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.580" endtime="20231202 14:00:12.631"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>MIT</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:12.632" endtime="20231202 14:00:12.683"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.684" endtime="20231202 14:00:12.734"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>1989</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:12.735" endtime="20231202 14:00:12.786"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.786" endtime="20231202 14:00:12.837"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.837" endtime="20231202 14:00:12.888"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.888" endtime="20231202 14:00:12.939"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.939" endtime="20231202 14:00:12.990"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:12.990" endtime="20231202 14:00:13.041"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.042" endtime="20231202 14:00:13.092"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.092" endtime="20231202 14:00:13.143"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>h</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.144" endtime="20231202 14:00:13.194"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>Show all BibTex references</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:13.195" endtime="20231202 14:00:13.233"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>l</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.234" endtime="20231202 14:00:13.284"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>test_au89</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:13.284" endtime="20231202 14:00:13.286"/>
</kw>
<kw name="Terminate" library="PexpectLibrary">
<doc>This forces a child process to terminate. It starts nicely with
SIGHUP and SIGINT. If "force" is True then moves onto SIGKILL. This
returns True if the child was terminated. This returns False if the
child could not be terminated.</doc>
<status status="PASS" starttime="20231202 14:00:13.286" endtime="20231202 14:00:13.387"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>${DB_FILE}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_connect_string`
(parsed as a list of named arguments).</doc>
<msg timestamp="20231202 14:00:13.389" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect("data/test-database.sqlite"))</msg>
<status status="PASS" starttime="20231202 14:00:13.388" endtime="20231202 14:00:13.390"/>
</kw>
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<arg>SELECT * FROM Bibrefs WHERE key='test_au89';</arg>
<doc>Check if any row would be returned by given the input ``selectStatement``. If there are no results, then this will
throw an AssertionError.</doc>
<msg timestamp="20231202 14:00:13.390" level="INFO">Executing : Check If Exists In Database  |  SELECT * FROM Bibrefs WHERE key='test_au89';</msg>
<msg timestamp="20231202 14:00:13.390" level="INFO">Executing : Query  |  SELECT * FROM Bibrefs WHERE key='test_au89'; </msg>
<status status="PASS" starttime="20231202 14:00:13.390" endtime="20231202 14:00:13.391"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20231202 14:00:13.392" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20231202 14:00:13.391" endtime="20231202 14:00:13.392"/>
</kw>
<status status="PASS" starttime="20231202 14:00:11.974" endtime="20231202 14:00:13.392"/>
</test>
<test id="s1-s1-t5" name="As A User I Can Delete References By Key" line="73">
<kw name="Spawn" library="PexpectLibrary">
<arg>python3 src/index_gui.py</arg>
<doc>Spawn a new process, and set the active process to the new process.
If current active process exists, it would be killed before spawning.</doc>
<status status="PASS" starttime="20231202 14:00:13.495" endtime="20231202 14:00:13.501"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>a</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.502" endtime="20231202 14:00:13.552"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>o</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.553" endtime="20231202 14:00:13.603"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>title</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:13.603" endtime="20231202 14:00:13.809"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>Technical Report</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:13.810" endtime="20231202 14:00:13.860"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.860" endtime="20231202 14:00:13.911"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>Powers, Austin</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:13.911" endtime="20231202 14:00:13.962"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:13.962" endtime="20231202 14:00:14.013"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>MIT</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:14.013" endtime="20231202 14:00:14.064"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.064" endtime="20231202 14:00:14.115"/>
</kw>
<kw name="Send Line" library="PexpectLibrary">
<arg>1965</arg>
<doc>Wraps `Send` , sending string ``s`` to child process, with
``os.linesep`` automatically appended. Returns number of bytes
written.  Only a limited number of bytes may be sent for each
line in the default terminal mode, see docstring of `Send` .</doc>
<status status="PASS" starttime="20231202 14:00:14.115" endtime="20231202 14:00:14.166"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.167" endtime="20231202 14:00:14.218"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.218" endtime="20231202 14:00:14.269"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.269" endtime="20231202 14:00:14.320"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.320" endtime="20231202 14:00:14.371"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.371" endtime="20231202 14:00:14.422"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.422" endtime="20231202 14:00:14.473"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>\t</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.473" endtime="20231202 14:00:14.524"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>h</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.524" endtime="20231202 14:00:14.574"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>l</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.575" endtime="20231202 14:00:14.625"/>
</kw>
<kw name="Send Control" library="PexpectLibrary">
<arg>j</arg>
<doc>Helper keyword that wraps `Send` with mnemonic access for sending control
character to the child (such as Ctrl-C or Ctrl-D).  For example, to send
Ctrl-G (ASCII 7, bell, '\a'):</doc>
<status status="PASS" starttime="20231202 14:00:14.626" endtime="20231202 14:00:14.626"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>d</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.626" endtime="20231202 14:00:14.677"/>
</kw>
<kw name="Send" library="PexpectLibrary">
<arg>y</arg>
<doc>Sends string ``s`` to the child process, returning the number of
bytes written. If a logfile is specified, a copy is written to that
log.</doc>
<status status="PASS" starttime="20231202 14:00:14.677" endtime="20231202 14:00:14.730"/>
</kw>
<kw name="Expect" library="PexpectLibrary">
<arg>Show all BibTex references</arg>
<doc>This seeks through the stream until a pattern is matched. The
pattern is overloaded and may take several types. The pattern can be a
StringType, pexpect.EOF, pexpect.TIMEOUT, a compiled re, or a list of any of those types.
Strings will be compiled to re types. This returns the index into the
pattern list. If the pattern was not a list this returns index 0 on a
successful match. This may raise exceptions for EOF or TIMEOUT. To
avoid the EOF or TIMEOUT exceptions add pexpect.EOF or pexpect.TIMEOUT to the pattern
list. That will cause expect to match an EOF or TIMEOUT condition
instead of raising an exception.</doc>
<status status="PASS" starttime="20231202 14:00:14.730" endtime="20231202 14:00:14.809"/>
</kw>
<kw name="Set Delay After Terminate" library="PexpectLibrary">
<arg>3</arg>
<doc>Change the value of `delayafterterminate' attribute.</doc>
<status status="PASS" starttime="20231202 14:00:14.809" endtime="20231202 14:00:14.810"/>
</kw>
<kw name="Terminate" library="PexpectLibrary">
<doc>This forces a child process to terminate. It starts nicely with
SIGHUP and SIGINT. If "force" is True then moves onto SIGKILL. This
returns True if the child was terminated. This returns False if the
child could not be terminated.</doc>
<status status="PASS" starttime="20231202 14:00:14.810" endtime="20231202 14:00:17.814"/>
</kw>
<kw name="Connect To Database Using Custom Params" library="DatabaseLibrary">
<arg>sqlite3</arg>
<arg>${DB_FILE}</arg>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_connect_string`
(parsed as a list of named arguments).</doc>
<msg timestamp="20231202 14:00:17.815" level="INFO">Executing : Connect To Database Using Custom Params : sqlite3.connect(db_api_2.connect("data/test-database.sqlite"))</msg>
<status status="PASS" starttime="20231202 14:00:17.814" endtime="20231202 14:00:17.815"/>
</kw>
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<arg>SELECT * FROM Bibrefs WHERE key='Powers65';</arg>
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<msg timestamp="20231202 14:00:17.816" level="INFO">Executing : Check If Not Exists In Database  |  SELECT * FROM Bibrefs WHERE key='Powers65';</msg>
<msg timestamp="20231202 14:00:17.816" level="INFO">Executing : Query  |  SELECT * FROM Bibrefs WHERE key='Powers65'; </msg>
<status status="PASS" starttime="20231202 14:00:17.816" endtime="20231202 14:00:17.817"/>
</kw>
<kw name="Disconnect From Database" library="DatabaseLibrary">
<doc>Disconnects from the database.</doc>
<msg timestamp="20231202 14:00:17.817" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20231202 14:00:17.817" endtime="20231202 14:00:17.817"/>
</kw>
<status status="PASS" starttime="20231202 14:00:13.494" endtime="20231202 14:00:17.817"/>
</test>
<status status="PASS" starttime="20231202 14:00:11.913" endtime="20231202 14:00:17.919"/>
</suite>
<status status="PASS" starttime="20231202 14:00:11.902" endtime="20231202 14:00:17.921"/>
</suite>
<statistics>
<total>
<stat pass="5" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="5" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="5" fail="0" skip="0" id="s1-s1" name="Tests">Tests.Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
